I very much prefer to work in a variety of small JavaScript and CSS files.  In fact, I believe that monolithic files that contain a site's entire stack of behavior and style are [broken windows][bw_theory] that encourage the production of poorly organized -- and therefore poorly understood -- code.

No matter how capable you believe your team is, work done in these types of files will simply _never_ be sleek and comprehensible.  New additions will be appended without regard for context by developers in a hurry to get something out the door, because the file's _huge_, and who has time to figure out the most reasonable place to stick this module's code?  Likewise, code will be duplicated by developers who can't be bothered to sift through the whole file for bits to reuse, or who try, and simply miss the relevant section in the sprawl of irrelevancy.

This behavior is self-perpetuating: as the file gets longer and more disorganized and repetitive, it becomes easier and easier to just cross your fingers and slap another quick fix on top of the quick fix you put in last week, and more and more difficult to see what last week's fix actually depends on.  The single-file approach to CSS and JavaScript makes it likely that you'll produce code that _functions_, with the tiny caveat that your team will be afraid to touch any of it.

[bw_theory]: #TODO "Insert a wikipedia link here"

In the interests of efficiency, comprehensibility, and reusability, I'd recommend breaking your CSS and JavaScript monoliths into as many single-purpose files as you can.  The more specific, the better.  A `widget_x.css` file that contains all the specific styles necessary to display Widget X on your page combined with a `generic_widget.css` file that contains the more generic styles upon which that type of widget depends makes everyone's life simpler.  If you want to edit that widget's background colour, you edit `widget_x.css`.  If you want to change the width of all the widgets on the page, you edit `generic_widget.css`.  Easy!  Sane!
